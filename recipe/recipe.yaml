# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json

context:
  name: torchaudio
  version: "2.5.1"
  build_number: 1
  # convenience: major.minor part of version, e.g. "2.5"
  torchaudio_mm: ${{ (version | split(".") )[:2] | join(".") }}
  # Use cuda_compiler_version directly from variant; default to "None" for CPU builds
  cuda_version: ${{ cuda_compiler_version | default("None") }}
  cuda_build_string: cuda_${{ cuda_version | version_to_buildstring }}
  string_prefix: ${{ cuda_build_string if cuda_version != "None" else "cpu_" }}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  - url: https://github.com/pytorch/audio/archive/refs/tags/v${{ version }}.tar.gz
    sha256: 200fbb1234c104a3662b444c0bec2acf4049c4b2113a73c0dc5f4e672cc2a4cc
    patches:
      - patches/0001-point-to-correct-prefix.patch
      - patches/0002-use-conda-cuda.patch
      - patches/0003-Apply-CMAKE_ARGS-if-set.patch
      - patches/0004-Add-missing-skipIfNoFFmpeg-for-TestFileObject.patch
      - patches/0005-replace-FLT_MAX-for-compatibility-with-newer-cudatoo.patch

build:
  number: ${{ build_number }}
  skip:
    - match(cuda_compiler_version, "==11.8") and (aarch64 or win)
    # - not win  # Remove this debug skip
  string: ${{ string_prefix }}py${{ python | version_to_buildstring }}h${{ hash }}_${{ build_number }}
  variant:
    use_keys:
      # use cuda from the variant config, e.g. to build multiple CUDA variants
      - ${{ "cuda_compiler_version" if cuda_version != "None" }}
    # this will down-prioritize the cuda variant versus other variants of the package
    down_prioritize_variant: ${{ 1 if cuda_version != "None" else 0 }}
  script:
    file: build
    env:
      cuda_compiler_version: ${{ cuda_version | default('None') }}

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - pytorch

        - if: match(cuda_compiler_version, ">=12")
          then:
            - if: linux
              then: cuda-driver-dev
            - cuda-cudart-dev
            - cuda-nvrtc-dev
            - cuda-nvtx-dev
            - cuda-nvml-dev
            - cuda-profiler-api
            - libcublas-dev
            - libcufft-dev
            - libcurand-dev
            - libcusolver-dev
            - libcusparse-dev

    # ---- C / C++ compilers --------------------------------------------------
    - ${{ compiler('cxx') }}
    - ${{ compiler('c') }}
    - ${{ stdlib("c") }}
    - cmake
    - ninja
    - ccache
    - git

    # CUDA build dependencies - use cuda_compiler_version directly
    - if: cuda_compiler_version is defined and cuda_compiler_version != "None"
      then:
        - ${{ compiler('cuda') }}
        - cuda-version ${{ cuda_compiler_version }}.*
    
    # Platform-specific nvcc package
    - if: (cuda_compiler_version is defined and cuda_compiler_version != "None") and win
      then: cuda-nvcc_win-64 ${{ cuda_compiler_version }}.*
    - if: (cuda_compiler_version is defined and cuda_compiler_version != "None") and not win
      then: cuda-nvcc ${{ cuda_compiler_version }}.*

  host:
    - python
    - pip
    - setuptools
    # torchaudio â‡” pytorch major.minor must match (e.g. 2.5.*)
    - pytorch ${{ torchaudio_mm }}.*
    - bzip2
    - kaldi
    - pybind11
    # - sox
    # - ffmpeg
    - xz
    - zlib

    # CUDA host dependencies
    - if: cuda_compiler_version is defined and cuda_compiler_version != "None"
      then:
        - cuda-version ${{ cuda_compiler_version }}.*
    
    - if: (cuda_compiler_version is defined and cuda_compiler_version != "None") and win
      then: cuda-nvcc_win-64 ${{ cuda_compiler_version }}.*
    - if: (cuda_compiler_version is defined and cuda_compiler_version != "None") and not win
      then: cuda-nvcc ${{ cuda_compiler_version }}.*

    - if: cuda_compiler_version is defined and match(cuda_compiler_version, ">=12")
      then:
        - if: linux
          then: cuda-driver-dev
        - cuda-cudart-dev
        - cuda-nvrtc-dev
        - cuda-nvtx-dev
        - cuda-nvml-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcufft-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
  run:
    - python
    - numpy
    - kaldi
    - pytorch ${{ torchaudio_mm }}.*

  ignore_run_exports:
    from_package:
      - if: cuda_compiler_version is defined and match(cuda_compiler_version, ">=12")
        then:
          - cuda-nvrtc-dev
          - cuda-nvtx-dev
          - libcublas-dev
          - libcufft-dev
          - libcurand-dev
          - libcusolver-dev
          - libcusparse-dev

tests:
  - python:
      imports:
        - torchaudio
        - torchaudio.backend
        - torchaudio.compliance
        - torchaudio.datasets
        - torchaudio.functional
        - torchaudio.models
        - torchaudio.pipelines
        - torchaudio.kaldi_io
        - torchaudio.utils
        - torchaudio.sox_effects
        - torchaudio.transforms
      pip_check: true

  - requirements:
      run:
        - pytest
        - scipy
        - numpy
        - librosa
        - expecttest
        - requests
        - hypothesis
        - inflect
        # gpu version of kaldi tries to load libcuda, which we don't have
        - kaldi * cpu*
        - kaldi_io
        - parameterized
        - pysoundfile
        - transformers
        - unidecode
        - inflect
        # - sox
        - pytorch-lightning
        - sentencepiece
        # Keep test-env CUDA minor equal to build minor
        - if: cuda_compiler_version is defined and cuda_compiler_version != "None"
          then:
            - cuda-version  ${{ cuda_compiler_version }}.*
            - cuda-cudart   ${{ cuda_compiler_version }}.*
            - cuda-cupti    ${{ cuda_compiler_version }}.*
            - cuda-nvrtc    ${{ cuda_compiler_version }}.*
            - libcublas     ${{ cuda_compiler_version }}.*
            - libcudnn
            - libcudnn-dev
    files:
      source:
        - test/
        - examples/
      recipe:
        - run_tests.sh
    script:
      - bash run_tests.sh

about:
  homepage: https://github.com/pytorch/audio
  license: BSD-2-Clause
  license_file:
    - LICENSE
    - third_party/LICENSES_BUNDLED.txt
  summary: Data manipulation and transformation for audio signal processing, powered by PyTorch

extra:
  recipe-maintainers:
    - Tobias-Fischer
    - h-vetinari
