# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json

context:
  name: torchaudio
  version: "2.5.1"
  build_number: 1
  # Honour the CUDA version coming from the variant configuration while still
  # allowing an explicit developer override through CONDA_OVERRIDE_CUDA.
  cuda_version: ${{ env.get("CONDA_OVERRIDE_CUDA",
                            default=cuda_compiler_version | default("None")) }}
  cuda: ${{ "true" if cuda_version != "None" else "false" }}
  cuda_build_string: cuda_${{ cuda_version | version_to_buildstring }}
  string_prefix: ${{ cuda_build_string if cuda ==  "true" else "cpu_" }}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  - url: https://github.com/pytorch/audio/archive/refs/tags/v${{ version }}.tar.gz
    sha256: 200fbb1234c104a3662b444c0bec2acf4049c4b2113a73c0dc5f4e672cc2a4cc
    patches:
      - patches/0001-point-to-correct-prefix.patch
      - patches/0002-use-conda-cuda.patch
      - patches/0003-Apply-CMAKE_ARGS-if-set.patch
      - patches/0004-Add-missing-skipIfNoFFmpeg-for-TestFileObject.patch
      - patches/0005-replace-FLT_MAX-for-compatibility-with-newer-cudatoo.patch

build:
  number: ${{ build_number }}
  skip:
    - cuda_compiler_version | version_compare("==11.8") and (aarch64 or win)
    - not win  # for debugging
  string: ${{ string_prefix }}py${{ python | version_to_buildstring }}h${{ hash }}_${{ build_number }}
  script:
    file: build
    env:
      cuda_compiler_version: ${{ cuda_version | default('None') }}

requirements:
  build:
    - python                                  # [build_platform != target_platform]
    - cross-python_${{ target_platform }}      # [build_platform != target_platform]
    - pytorch                                 # [build_platform != target_platform]
    - cuda-driver-dev                         # [linux and cuda_version | version_compare(">=12") and build_platform != target_platform]
    - cuda-cudart-dev                         # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - cuda-nvrtc-dev                          # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - cuda-nvtx-dev                           # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - cuda-nvml-dev                           # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - cuda-profiler-api                       # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - libcublas-dev                           # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - libcufft-dev                            # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - libcurand-dev                           # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - libcusolver-dev                         # [cuda_version | version_compare(">=12") and build_platform != target_platform]
    - libcusparse-dev                         # [cuda_version | version_compare(">=12") and build_platform != target_platform]

    - ${{ compiler('cxx') }}
    - ${{ compiler('c') }}
    - ${{ stdlib("c") }}
    - cmake
    - ninja
    - ccache
    - git

    # nvcc is mandatory at build‑time; `compiler('cuda')` alone does not
    # pull it in on win‑64 yet.
    - ${{ compiler('cuda') }}                                  # [cuda == "true"]
    - ${{ "cuda-nvcc_win-64" if win else "cuda-nvcc" }}      # [cuda == "true"]
    - cuda-version ==${{ cuda_version }}                      # [cuda == "true"]

  host:
    - python
    - pip
    - setuptools
    - ${{ "pytorch * cuda*" if cuda == "true" else "pytorch * cpu*" }}
    - bzip2
    - kaldi
    - pybind11
    # - sox
    # - ffmpeg
    - xz
    - zlib

    # nvcc package names differ by platform.
    - cuda-version ==${{ cuda_version }}                      # [cuda == "true"]
    - ${{ "cuda-nvcc_win-64" if win else "cuda-nvcc" }}      # [cuda == "true"]

    - cuda-driver-dev                         # [linux and cuda_version | version_compare(">=12")]
    - cuda-cudart-dev                         # [cuda_version | version_compare(">=12")]
    - cuda-nvrtc-dev                          # [cuda_version | version_compare(">=12")]
    - cuda-nvtx-dev                           # [cuda_version | version_compare(">=12")]
    - cuda-nvml-dev                           # [cuda_version | version_compare(">=12")]
    - cuda-profiler-api                       # [cuda_version | version_compare(">=12")]
    - libcublas-dev                           # [cuda_version | version_compare(">=12")]
    - libcufft-dev                            # [cuda_version | version_compare(">=12")]
    - libcurand-dev                           # [cuda_version | version_compare(">=12")]
    - libcusolver-dev                         # [cuda_version | version_compare(">=12")]
    - libcusparse-dev                         # [cuda_version | version_compare(">=12")]
  run:
    - python
    - numpy
    - kaldi
    - ${{ "pytorch * cuda*" if cuda == "true" else "pytorch * cpu*" }}

  ignore_run_exports:
    from_package:
      - cuda-nvrtc-dev      # [cuda_version | version_compare(">=12")]
      - cuda-nvtx-dev       # [cuda_version | version_compare(">=12")]
      - libcublas-dev       # [cuda_version | version_compare(">=12")]
      - libcufft-dev        # [cuda_version | version_compare(">=12")]
      - libcurand-dev       # [cuda_version | version_compare(">=12")]
      - libcusolver-dev     # [cuda_version | version_compare(">=12")]
      - libcusparse-dev     # [cuda_version | version_compare(">=12")]

tests:
  - python:
      imports:
        - torchaudio
        - torchaudio.backend
        - torchaudio.compliance
        - torchaudio.datasets
        - torchaudio.functional
        - torchaudio.models
        - torchaudio.pipelines
        - torchaudio.kaldi_io
        - torchaudio.utils
        - torchaudio.sox_effects
        - torchaudio.transforms
      pip_check: true

  - requirements:
      run:
        - pytest
        - scipy
        - numpy
        - librosa
        - expecttest
        - requests
        - hypothesis
        - inflect
        # gpu version of kaldi tries to load libcuda, which we don't have
        - kaldi * cpu*
        - kaldi_io
        - parameterized
        - pysoundfile
        - transformers
        - unidecode
        - inflect
        # - sox
        - pytorch-lightning
        - sentencepiece
    files:
      source:
        - test/
        - examples/
      recipe:
        - run_tests.sh
    script:
      - bash run_tests.sh

about:
  homepage: https://github.com/pytorch/audio
  license: BSD-2-Clause
  license_file:
    - LICENSE
    - third_party/LICENSES_BUNDLED.txt
  summary: Data manipulation and transformation for audio signal processing, powered by PyTorch

extra:
  recipe-maintainers:
    - Tobias-Fischer
    - h-vetinari
